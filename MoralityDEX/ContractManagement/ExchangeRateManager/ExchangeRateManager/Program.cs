using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using MoralityDexContractRepositories.Models;
using MoralityDexContractRepositories.Repositories;
using MoralityDexModel;
using MoralityDexModel.Models;
using MoralityDexRepositories;
using MoralityDexServices;
using MoralityDexServices.Models;
using Newtonsoft.Json;
using System;

namespace ExchangeRateManager
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var endpoint = "https://rinkeby.infura.io/v3/c53bb4cd98444ebf86d795702ec92338";
            var dexContractAddress = "0xf92703c2f59cdcdad1a8d9818cf07c093793f337";
            var abi = "[{'constant':true,'inputs':[],'name':'getExchangeWallet','outputs':[{'internalType':'address','name':'','type':'address'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[{'internalType':'address payable','name':'newWallet','type':'address'}],'name':'setExchangeWallet','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':true,'inputs':[{'internalType':'string','name':'symbol','type':'string'},{'internalType':'uint256','name':'id','type':'uint256'}],'name':'_getOpenTradeIndexById','outputs':[{'internalType':'uint256','name':'','type':'uint256'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[{'internalType':'string','name':'symbol','type':'string'},{'internalType':'uint256','name':'rate','type':'uint256'},{'internalType':'address','name':'tokenAddress','type':'address'}],'name':'addToken','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'internalType':'uint256','name':'amount','type':'uint256'}],'name':'withdrawFunds','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':true,'inputs':[],'name':'inLockdown','outputs':[{'internalType':'bool','name':'','type':'bool'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[],'name':'potentialNewOwner','outputs':[{'internalType':'address payable','name':'','type':'address'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[{'internalType':'string','name':'symbol','type':'string'}],'name':'getMinimumTradeTokenValue','outputs':[{'internalType':'uint256','name':'','type':'uint256'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[{'internalType':'string','name':'symbol','type':'string'}],'name':'purchaseCurrencyFIFO','outputs':[{'internalType':'bool','name':'','type':'bool'}],'payable':true,'stateMutability':'payable','type':'function'},{'constant':true,'inputs':[{'internalType':'string','name':'symbol','type':'string'}],'name':'getAmountOfTokensHeldByContract','outputs':[{'internalType':'uint256','name':'','type':'uint256'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[{'internalType':'bool','name':'state','type':'bool'}],'name':'updateLockdownState','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'internalType':'string','name':'symbol','type':'string'},{'internalType':'uint256','name':'amount','type':'uint256'}],'name':'addTrade','outputs':[{'internalType':'uint256','name':'id','type':'uint256'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[],'name':'acceptOwnership','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'internalType':'string','name':'symbol','type':'string'},{'internalType':'uint256','name':'id','type':'uint256'}],'name':'deleteTrade','outputs':[{'internalType':'bool','name':'','type':'bool'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':true,'inputs':[{'internalType':'string','name':'symbol','type':'string'},{'internalType':'uint256','name':'id','type':'uint256'}],'name':'getOpenTradeByIdResult','outputs':[{'internalType':'string','name':'result','type':'string'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[],'name':'owner','outputs':[{'internalType':'address payable','name':'','type':'address'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[],'name':'getMinimumEthPerTrade','outputs':[{'internalType':'uint256','name':'','type':'uint256'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[{'internalType':'address','name':'tokenAddress','type':'address'},{'internalType':'uint256','name':'amount','type':'uint256'}],'name':'withdrawFunds','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':true,'inputs':[{'internalType':'string','name':'symbol','type':'string'}],'name':'getToken','outputs':[{'internalType':'string','name':'','type':'string'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[{'internalType':'string','name':'symbol','type':'string'},{'internalType':'uint256','name':'pageNum','type':'uint256'},{'internalType':'uint256','name':'perPage','type':'uint256'}],'name':'getTrades','outputs':[{'internalType':'string','name':'','type':'string'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[{'internalType':'string','name':'symbol','type':'string'},{'internalType':'uint256','name':'rate','type':'uint256'},{'internalType':'address','name':'tokenAddress','type':'address'}],'name':'updateToken','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[],'name':'deprecateContract','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'internalType':'uint256','name':'minimumEthPerTrade','type':'uint256'}],'name':'setMinimumEthPerTrade','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'internalType':'address payable','name':'_newOwner','type':'address'}],'name':'transferOwnership','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address payable','name':'exchangeWallet','type':'address'},{'internalType':'uint256','name':'minimumEthPerTrade','type':'uint256'}],'payable':false,'stateMutability':'nonpayable','type':'constructor'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'string','name':'symbol','type':'string'},{'indexed':false,'internalType':'address','name':'token','type':'address'},{'indexed':false,'internalType':'uint256','name':'rate','type':'uint256'},{'indexed':false,'internalType':'uint256','name':'dateAdded','type':'uint256'}],'name':'AddedToken','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'address','name':'sender','type':'address'},{'indexed':false,'internalType':'uint256','name':'id','type':'uint256'},{'indexed':false,'internalType':'uint256','name':'amount','type':'uint256'},{'indexed':false,'internalType':'string','name':'symbol','type':'string'},{'indexed':false,'internalType':'uint256','name':'dateAdded','type':'uint256'}],'name':'AddTrade','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'address','name':'tokenAddress','type':'address'},{'indexed':false,'internalType':'address','name':'buyerAddress','type':'address'},{'indexed':false,'internalType':'address','name':'sellerAddress','type':'address'},{'indexed':false,'internalType':'uint256','name':'amountEth','type':'uint256'},{'indexed':false,'internalType':'uint256','name':'amountTokens','type':'uint256'},{'indexed':false,'internalType':'uint256','name':'dateAdded','type':'uint256'}],'name':'TradeCompleted','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'string','name':'symbol','type':'string'},{'indexed':false,'internalType':'address','name':'tradeOwner','type':'address'},{'indexed':false,'internalType':'uint256','name':'amountReturned','type':'uint256'},{'indexed':false,'internalType':'uint256','name':'dateAdded','type':'uint256'}],'name':'TradeDeleted','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'internalType':'address payable','name':'_from','type':'address'},{'indexed':true,'internalType':'address payable','name':'_to','type':'address'}],'name':'OwnershipTransferred','type':'event'}]";
            var address = "0xCDE41fA0279e1d8E56EAeEe9f7ACDaDA11A1C58A";
            var pk = "EA37385556EB8CFF259C69951BBD4E93506C6CB1835281E22CFCAACBEF305B99";
            var user = new EthereumUser() { Address = address, PrivateKey = pk };

            var settings = new MoralityDEXSettings() {
                LocalDatabaseConnectionString = "",
                MigrationsAssembly = ""
            };

            using (var context = new MoralityDEXEntities(settings))
            {
                var tokenIndexRepository = new TokenIndexRepository(context);
                var transactionRepository = new TransactionRepository(context);
                var dexRepository = new MoralityDEXRepository(endpoint, dexContractAddress, abi);
                var liveRateService = new LiveRateService();
                var tokenService = new TokenService(tokenIndexRepository, transactionRepository, dexRepository, liveRateService);
                tokenService.UpdateTokenRates(user).GetAwaiter().GetResult();
            }
        }
    }
}
